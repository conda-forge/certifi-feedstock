{% set version = "2023.11.17" %}

{% set pip_version = "23.3.1" %}
{% set setuptools_version = "68.2.2" %}

# For conda* parsing passes, have `SRC_DIR` fallback to `"."`
{% if SRC_DIR is undefined %}
{% set SRC_DIR = "." %}
{% endif %}

package:
  name: certifi
  version: {{ version }}

source:
  - url: https://pypi.io/packages/source/c/certifi/certifi-{{ version }}.tar.gz
    sha256: 9b469f3a900bf28dc19b8cfbf8019bf47f7fdd1a65a1d4ffb98fc14166beb4d1
    folder: certifi
  # bootstrap pip and setuptools to avoid circular dependency
  # but without losing metadata
  - url: https://pypi.io/packages/py3/p/pip/pip-{{ pip_version }}-py3-none-any.whl
    sha256: 55eb67bb6171d37447e82213be585b75fe2b12b359e993773aca4de9247a052b
    folder: pip_wheel
  - url: https://pypi.io/packages/py3/s/setuptools/setuptools-{{ setuptools_version }}-py3-none-any.whl
    sha256: b454a35605876da60632df1a60f736524eb73cc47bbc9f3f1ef1b644de74fd2a
    folder: setuptools_wheel

build:
  number: 0
  noarch: python
  script_env:
    # use bootstrapped pip to install certifi without depending on installed pip
    - >-
      PYTHONPATH=
      {%- for e in ["pip_wheel", "setuptools_wheel"] -%}
      {{ os.sep.join([SRC_DIR, e]) ~ os.pathsep }}
      {%- endfor -%}
      {{ os.environ.get("PYTHONPATH", "") }}
  script:
    - cd certifi
    - {{ PYTHON }} -m pip install . -vv

requirements:
  host:
    - python >=3.7
  run:
    - python >=3.7

test:
  imports:
    - certifi

about:
  home: http://certifi.io/
  license: ISC
  license_file: certifi/LICENSE
  summary: Python package for providing Mozilla's CA Bundle.
  description: |
    Certifi is a curated collection of Root Certificates for validating the
    trustworthiness of SSL certificates while verifying the identity of TLS
    hosts.
  doc_url: https://pypi.python.org/pypi/certifi
  dev_url: https://github.com/certifi/python-certifi
  doc_source_url: https://github.com/certifi/certifi.io/blob/master/README.rst

extra:
  recipe-maintainers:
    - jakirkham
    - pelson
    - sigmavirus24
    - ocefpaf
